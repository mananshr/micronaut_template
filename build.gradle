plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.4"
    id("io.micronaut.test-resources") version "3.7.4"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
}

version = "0.1"
group = "io.github.mananshr.microntest"

apply from: "gradle/asciidoc.gradle"
repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    annotationProcessor("info.picocli:picocli-codegen")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.data:micronaut-data-document-processor")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.spring:micronaut-spring-annotation")
    annotationProcessor("io.micronaut.spring:micronaut-spring-boot-annotation")
    implementation("info.picocli:picocli")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.cassandra:micronaut-cassandra")
    implementation("io.micronaut.data:micronaut-data-mongodb")
    implementation("io.micronaut.elasticsearch:micronaut-elasticsearch")
    implementation("io.micronaut.email:micronaut-email-amazon-ses")
    implementation("io.micronaut.email:micronaut-email-template")
    implementation("io.micronaut.graphql:micronaut-graphql")
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut.kafka:micronaut-kafka-streams")
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-client")
    implementation("io.micronaut.mongodb:micronaut-mongo-sync")
    implementation("io.micronaut.mqtt:micronaut-mqttv3")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-session")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.sql:micronaut-jdbc-tomcat")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("org.apache.logging.log4j:log4j-core:2.19.0")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("software.amazon.awssdk:dynamodb")
    runtimeOnly("io.micronaut.spring:micronaut-spring-boot")
    runtimeOnly("mysql:mysql-connector-java")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.19.0")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.19.0")
    runtimeOnly("org.mongodb:mongodb-driver-sync")
    testAnnotationProcessor("io.micronaut.spring:micronaut-spring-annotation")
    testAnnotationProcessor("io.micronaut.spring:micronaut-spring-boot-annotation")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    implementation("io.micronaut:micronaut-validation")

}


application {
    mainClass.set("io.github.mananshr.microntest.TestCommand")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.github.mananshr.microntest.*")
    }
    testResources {
        sharedServer = true
    }
}



